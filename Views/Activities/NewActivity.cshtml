@model WebApplication1.Models.NewActivityModel

@{
    ViewData["Title"] = "New Activity";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />  

</head>
<body>
   <h1>Esse é um teste</h1>
   <form>
       <div class="form-group">
           <select id="ClientName" onchange="selectedOption()">
               <option selected="true" onclick="selectedOption" >Selecione um cliente</option>
               @foreach(ClientModel m in Model.Client){
                    <option value=@m.ClientId >@m.Name</option>
                }
            </select>
            <select id="TaskList" style="display:none;">
                <option selected="true" value="">Selecione um cliente</option>
            </select>         
       
            <h2 id="tempo1">00:00:00</h2>
            <button id="btn1" onclick="iniciaTimer()">Iniciar</button>
            <button onclick="pararTimer()">Parar</button>
      
       </div>

   
		<div class="form-row">
		
			<div class="form-group col-md-8">
				<h4 >Comentários</h4>
				<input type="text" name="comentarios" id="comentarios" class="form-control" ></input>
			</div>
				
			<div class="form-group col-md-2">
			<h4 >Solicitações</h4>
				<input type="number" name="solicitacao" id="solicitacao" class="form-control" ></input>
			</div>

			<div class="form-group col-md-2">
			<h4 >Atividades</h4>
				<input type="number" name="atividadeQ" id="atividadeQ" class="form-control" ></input>
			</div>

			<div>			
				<input class="form-check-input" id="kengaku" type="checkbox" value="Shadowning"></input>
				<p class="h4" style="display: inline">kengaku</p>
			</div>
		</div>
        
       
        <input type="submit" value="CreateNewTask" />
	</form>	
    <br/>
    <br/>
    <input type="date" id="TimerTest" />
    <button onclick="postNewActivity()">POstar</button>

</body>
</html>

<script type="text/javascript">  
    
    let startTime = 0
    let currentTime = 0
    let interval

    function selectedOption(){       
               
        clientNumber = document.getElementById("ClientName").value        
        
       const rjson = fetch('/Activities/GetClientTask?id=' + clientNumber )
            .then(response => response.json())
            .then(jrs =>{
                generateOption(jrs)   
                document.getElementById("TaskList").style.display = "block"
            } )
            .catch(err => {
                alert("Error getting the tasks.")
                console.log(err);
                throw err;
            })            
    }

    function generateOption(response){        
        response.map( item => {
            let option = document.createElement("option")
            let select = document.getElementById("TaskList")
            option.text = item.Description
            option.value = item.Description        
            select.appendChild(option)
        })       
    }    

    function iniciaTimer(){ 

        const timeHourMinSec = new Date()   
    
        if(startTime <= 0){
            startTime = Date.now() 
        } else{
            startTime = Date.now() - currentTime
        }  

        let posAlarmTime = 0

        document.getElementById("btn1").disabled = true    
    
	    interval = setInterval(() => {
            currentTime = Date.now() - startTime
            timeHourMinSec.setTime(currentTime)
            document.getElementById("tempo1").innerHTML = timeHourMinSec.toISOString().substr(11, 8)

            //checkAlarm(currentTime)

        },1000);    
    }

    function pararTimer(){  
    
	    clearInterval(interval);
	    document.getElementById("btn1").disabled = false;   
    }

        function postNewActivity(){        
        
        //Estrutura só de teste.
        let data = {
            //Id: 2,
            IdService: 13,
            IdOperator: 14,
            StartTime: document.getElementById("TimerTest").value,
            EndTIme: document.getElementById("TimerTest").value,
            Comment : "Um teste",
            Time: 1,
            IsActive: true,
            IsShadowing: true,
            IsExtraTime: true
        }        

        fetch('/Activities/TesteDePost', {
          method: "POST",
          body: JSON.stringify(data),         
          headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
          }         
        }) 
    }
</script>




